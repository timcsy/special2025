"""
Django settings for special project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-8sws_b-3mu8n(8w1z)t1=hdd*mgv1mpjwc3aj3_4bdi4$d6m%b')

# SECURITY WARNING: don't run with debug turned on in production!
# 更準確的讀取 DEBUG 環境變數
DEBUG_ENV = os.environ.get('DEBUG', 'True').lower()
DEBUG = DEBUG_ENV == 'true' or DEBUG_ENV == '1' or DEBUG_ENV == 'yes'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # 添加 CORS 支持
    'score',  # 添加 score 應用
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # 添加 WhiteNoise 中間件處理靜態文件
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 添加 CORS 中間件處理跨域請求
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'special.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'special.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 取得資料庫路徑環境變數
db_env_path = os.environ.get('DATABASE_PATH', 'db.sqlite3')

# 處理資料庫路徑：相對路徑要轉為絕對路徑
if db_env_path.startswith('/'):
    # 如果是絕對路徑，保持原樣
    db_full_path = db_env_path
else:
    # 如果是相對路徑，則相對於BASE_DIR處理
    db_full_path = os.path.join(BASE_DIR, db_env_path)

# 設定資料庫
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': db_full_path,
    }
}

# 處理資料庫路徑檢查
db_path = DATABASES['default']['NAME']
# 如果是絕對路徑(Linux環境)且檔案不存在
if isinstance(db_path, str) and db_path.startswith('/') and not os.path.exists(db_path):
    print(f"警告: 無法找到資料庫檔案: {db_path}")
    # 嘗試在/app/data目錄(Docker環境)
    docker_path = '/app/data/db.sqlite3'
    if os.path.exists(docker_path):
        print(f"找到docker環境資料庫: {docker_path}")
        DATABASES['default']['NAME'] = docker_path
    else:
        # 否則使用專案目錄下的data資料夾
        project_db_path = os.path.join(BASE_DIR, 'data', 'db.sqlite3')
        print(f"嘗試使用專案資料庫路徑: {project_db_path}")
        DATABASES['default']['NAME'] = project_db_path
        # 確保路徑存在
        if not os.path.exists(os.path.join(BASE_DIR, 'data')):
            print("建立data資料夾")
            os.makedirs(os.path.join(BASE_DIR, 'data'), exist_ok=True)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hant'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 定義額外的靜態文件目錄
STATICFILES_DIRS = []
# 只有在開發環境(非Docker)才使用score/static目錄
if os.path.exists(os.path.join(BASE_DIR, 'score', 'static')):
    STATICFILES_DIRS.append(os.path.join(BASE_DIR, 'score', 'static'))

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 生產環境安全設定
if not DEBUG:
    # 添加內容安全策略
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    
    # WhiteNoise 設定
    WHITENOISE_MANIFEST_STRICT = False
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 不管是否為調試模式，都禁用需要 HTTPS 的安全功能
# 因為我們目前沒有配置 HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False  
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# CSRF 設定
CSRF_TRUSTED_ORIGINS = ['http://localhost', 'http://127.0.0.1', 'http://localhost:8000', 'http://127.0.0.1:8000']
for host in ALLOWED_HOSTS:
    if host not in ('localhost', '127.0.0.1'):
        CSRF_TRUSTED_ORIGINS.extend([f'http://{host}', f'https://{host}'])

# CSRF 和 Cookie 設定
CSRF_USE_SESSIONS = False  # 將 CSRF 令牌存儲在 Cookie 中而不是會話中
CSRF_COOKIE_HTTPONLY = False  # 允許 JavaScript 訪問 CSRF cookie
CSRF_COOKIE_SAMESITE = 'Lax'  # 適中的 SameSite 設置

# CORS 設定
CORS_ALLOW_ALL_ORIGINS = True  # 允許所有來源的跨域請求
CORS_ALLOW_CREDENTIALS = True  # 允許跨域請求攜帶認證信息
